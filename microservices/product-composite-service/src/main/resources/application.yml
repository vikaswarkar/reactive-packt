api:

  common:
    version: 1.0.0
    title: Sample API
    description: Description of the API...
    termsOfServiceUrl: MINE TERMS OF SERVICE URL
    license: License
    licenseUrl: MY LICENSE URL

    contact:
      name: Contact
      url: My
      email: me@mail.com

  product-composite:

get-composite-product:
  description: Returns a composite view of the specified product id
  notes: |
    # Normal response
    If the requested product id is found the method will return information regarding:
    1. Product information
    1. Reviews
    1. Recommendations
    1. Service Addresses
    (technical information regarding the addresses of the microservices that created the response)

    # Expected partial and error responses
    1. If no product information is found, a <b>404 - Not Found</b> error will be returned
    1. In no recommendations or reviews are found for a product, a partial response will be returned

  create-composite-product:
    description: Creates a composite product
    notes: |
      # Normal response
      The composite product information posted to the API will be splitted up and stored as separate product-info, recommendation and review entities.

      # Expected error responses
      1. If a product with the same productId as specified in the posted information already exists,
         an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned

  delete-composite-product:
    description: Deletes a product composite
    notes: |
      # Normal response
      Entities for product information, recommendations and reviews related to the specificed productId will be deleted.
      The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
      This means that a delete request of a non existing product will return <b>200 Ok</b>.



server.port: ${PORT:0}
#server.port: 8080

app:
  product-service:
    host: localhost
    port: 7001
  recommendation-service:
    host: localhost
    port: 7002
  review-service:
    host: localhost
    port: 7003
  eureka-server: localhost
  eureka-username: user
  eureka-password: password
  auth-server: localhost
#  auth-server: vw-dev.us.auth0.com

spring:
  application:
    name: product-composite

  security:
    oauth2:
      resourceserver:
        jwt:
#          issuer-uri: https://vw-dev.us.auth0.com/
          jwk-set-uri: http://${app.auth-server}:9999/.well-known/jwks.json
#          jwk-set-uri: http://${app.auth-server}:9999/.well-known/jwks.json
  main:
    allow-bean-definition-overriding: true

# These values are injected in the integration service.
# These values are not used any more in the cloud environment, as the eureka client will
#  retrieve the actual instances of the core services from the eureka server
# based of the app-name(virtual name)

logging:
  level:
    root: INFO
    se.magnus: DEBUG

management.endpoint.health.show-details: "ALWAYS"
management.endpoints.web.exposure.include: "*"

eureka:
  client:
    serviceUrl:
      defaultZone: "http://${app.eureka-username}:${app.eureka-password}@${app.eureka-server}:8761/eureka/"
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5
    instance-id: ${spring.application.name}:${spring.application.instance_id:${random.value}}

ribbon.ServerListRefreshInterval: 5000

ribbon.NFLoadBalancerPingInterval: 5

---

spring.profiles: docker

server:
  port: 8080

app:
  product-service:
    host: product
    port: 8080
  recommendation-service:
    host: recommendation
    port: 8080
  review-service:
    host: review
    port: 8080
  eureka-server: eureka
  auth-server: auth-server

